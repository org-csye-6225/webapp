name: Build Custom Image & Setup latest Instance

on:
  workflow_dispatch:
  push:
    branches:
        - main

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout webapp
      uses: actions/checkout@v2

    - name: Create zip artifact
      run: |
        mkdir -p cred
        echo "${{ secrets.GCP_SA_KEY }}" > cred/gcp_sa_key.json
        zip -r /tmp/webapp.zip . -x "cred/gcp_sa_key.json"
        zip -ur /tmp/webapp.zip cred/gcp_sa_key.json

    - name: Upload repository artifact
      uses: actions/upload-artifact@v2
      with:
        name: webapp-artifact
        path: /tmp/webapp.zip

    - name: Download webapp artifact
      uses: actions/download-artifact@v2
      with:
        name: webapp-artifact
    
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
          version: '>= 363.0.0'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: Initialize Packer
      run:  packer init packer/packer_file.pkr.hcl
    
    - name: Format Packer configuration
      run:  packer fmt packer/packer_file.pkr.hcl
    
    - name: Validate Packer configuration
      run:  packer validate packer/packer_file.pkr.hcl
          
    - name: Run Packer Build
      run: packer build packer/packer_file.pkr.hcl

    - name: Get latest machine image
      id: latest_image
      run: |
        image_id=$(gcloud compute images list --filter="name~'custom-image-with-pubsub-'" --sort-by=~creationTimestamp --format="value(name)" --limit=1)
        echo "::set-output name=image_id::$image_id"
        
    - name: Create startup script
      run: |
        SQL_PSWD=$(gcloud secrets versions access latest --secret=mysql_pswd)
        DB_HOST=$(gcloud secrets versions access latest --secret=mysql_host_ip)
        echo '#!/bin/bash' > startup-script.sh
        echo 'cat <<EOF >> /opt/csye6225/webapp/.env' >> startup-script.sh
        echo "DATABASE=${{ secrets.DB_NAME }}" >> startup-script.sh
        echo "SQL_USER=${{ secrets.SQL_USER }}" >> startup-script.sh
        echo "SQL_PSWD=$SQL_PSWD" >> startup-script.sh
        echo "HOST=$DB_HOST" >> startup-script.sh
        echo 'EOF' >> startup-script.sh
        echo 'chown csye6225:csye6225 /opt/csye6225/webapp/.env' >> startup-script.sh
        echo '' >> startup-script.sh
        echo '# Create or update config.yaml' >> startup-script.sh
        echo 'cat <<EOF > /etc/google-cloud-ops-agent/config.yaml' >> startup-script.sh
        echo 'logging:' >> startup-script.sh
        echo ' receivers:' >> startup-script.sh
        echo '   my-app-receiver:' >> startup-script.sh
        echo '     type: files' >> startup-script.sh
        echo '     include_paths:' >> startup-script.sh
        echo '       - /var/log/webapp/combined.log' >> startup-script.sh
        echo '     record_log_file_path: true' >> startup-script.sh
        echo ' processors:' >> startup-script.sh
        echo '   my-app-processor:' >> startup-script.sh
        echo '     type: parse_json' >> startup-script.sh
        echo '     time_key: time' >> startup-script.sh
        echo '     time_format: "%Y-%m-%dT%H:%M:%S.%fZ"' >> startup-script.sh
        echo '   move_severity:' >> startup-script.sh
        echo '     type: modify_fields' >> startup-script.sh
        echo '     fields:' >> startup-script.sh
        echo '       severity:' >> startup-script.sh
        echo '         move_from: jsonPayload.level' >> startup-script.sh
        echo '         map_values:' >> startup-script.sh
        echo '           INFO: "info"' >> startup-script.sh
        echo '           ERROR: "error"' >> startup-script.sh
        echo '           WARNING: "warn"' >> startup-script.sh
        echo '           DEBUG: "debug"' >> startup-script.sh
        echo ' service:' >> startup-script.sh
        echo '   pipelines:' >> startup-script.sh
        echo '     default_pipeline:' >> startup-script.sh
        echo '       receivers: [my-app-receiver]' >> startup-script.sh
        echo '       processors: [my-app-processor, move_severity]' >> startup-script.sh
        echo 'EOF' >> startup-script.sh
        echo '' >> startup-script.sh

      
    - name: Set permissions for startup-script.sh
      run: chmod +x startup-script.sh

    - name: Create new Instance Template
      run: |
        key_ring_name=$(gcloud kms keyrings list --location ${{ secrets.GCP_REGION }} --format="value(name)" | sort -r | head -n 1)
        gcloud compute instance-templates create "my-instance-template-${{ steps.latest_image.outputs.image_id }}" \
          --machine-type="e2-standard-2" \
          --region="${{ secrets.GCP_REGION }}" \
          --instance-template-region="${{ secrets.GCP_REGION }}" \
          --image="${{ steps.latest_image.outputs.image_id }}" \
          --subnet="$(gcloud compute networks subnets list --filter="name=webapp" --format="value(selfLink)")" \
          --service-account="$(gcloud iam service-accounts list --filter='name~new-service-account' --format='value(email)')" \
          --scopes="https://www.googleapis.com/auth/cloud-platform","https://www.googleapis.com/auth/pubsub" \
          --boot-disk-type=pd-balanced \
          --boot-disk-size=100GB \
          --boot-disk-kms-key="$key_ring_name/cryptoKeys/vm-disk-encryption-key" \
          --metadata-from-file="startup-script=startup-script.sh"
    
    - name: Update Managed Instance Group
      run: |
        gcloud compute instance-groups managed set-instance-template "my-instance-group" \
          --region="${{ secrets.GCP_REGION }}" \
          --template="projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/instanceTemplates/my-instance-template-${{ steps.latest_image.outputs.image_id }}"
          
    - name: Recreate Instances
      run: |
        gcloud compute instance-groups managed rolling-action start-update "my-instance-group" \
          --region="${{ secrets.GCP_REGION }}" \
          --version="template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/instanceTemplates/my-instance-template-${{ steps.latest_image.outputs.image_id }}"
        
    - name: Wait for Instance Group Refresh
      run: |
          expected_instances=$(gcloud compute instance-groups managed describe "my-instance-group" --region="${{ secrets.GCP_REGION }}" --format="value(targetSize)")

          gcloud compute instance-groups managed wait-until "my-instance-group" \
            --region="${{ secrets.GCP_REGION }}" \
            --version-target-reached \
            --format="value(status.versionTarget.isReached,status.isStable)"
          
          if [ "$?" -eq 0 ]; then
            echo "Instance Group Refresh Complete (Expected: $expected_instances instances)"
            exit 0
          else
            status=$(gcloud compute instance-groups managed describe "my-instance-group" --region="${{ secrets.GCP_REGION }}" --format="value(status)")
            echo "Instance Group Refresh Failed (Expected: $expected_instances instances, Current Status: $status)"
            exit 1
          fi
